@*
    т.е. передаем объект для отображения - MVCRazorExample.Person (имя класса, по сути),
    а обращаемся к нему через Model.ИмяСвойства
    мы можем передать лишь один объект во вьюшку...

    ниже мы назначаем layout строчкой Layout = "/Views/Shared/_SecondLayout.cshtml"
*@

@*@{
        ViewBag.Title = "Layout example";
        Layout = "/Views/Shared/_SecondLayout.cshtml";
    }*@

@model MVCRazorExample.Person

@{
}
<h1>Hello</h1>
<p>First Name: @Model.FirstName</p>
<p>Last Name: @Model.LastName.ToUpper()</p>




@*
    Как только фреймворк видит открывающийся HTML тэг, он переходит в режим отображения этого языка разметки.
    Как только достигается конец тега, то мы возвращаемся в режим кода и можем писать CS код.
    Есть еще один вариант перевести текущую строку в HTML режим – поставить @:
    В таком случае, строка не заключается в теги вообще (если смотреть уже отрендеренную страницу)
*@

@{
    int i = 10;
    <p> index = @i</p>
    @: This is a string @i
}

@if (Model.FirstName == "")
{
    <p>
        текст
    </p>
}
else
{
    <p>Иван @Model.LastName</p>
}

<h1>while</h1>
<p>Цикл while:</p>
<ul>
    @{
        int index = 0;
        //важно определять переменную для цикла в фигурных скобках
    }
    @while (index < 3)
    {
        <li>@index</li>

        index++;
    }
</ul>

@using (Html.BeginForm())
{
    <h1>форма</h1>
}

@await Html.PartialAsync("_Item", Model)
@*если оставить ; после выражения выше, как в обычном коде, знак будет обработан как символ разметки...
    Это происходит потому что выражение выше НЕ ЯВЛЯЕТСЯ блоком кода, а лишь отображающейся в HTML переменной
    перед которой нужно ставить @

    RenderPartialAsync отличается тем, что они вызывает отрисовку представления,
    но при этом не возвращает его в качестве результата, а отображает его.

    @await Html.RenderPartialAsync("_Item", Model); - работать не будет, так как метод возвращает void

    мы можем использовать это различие для обработки результата, не отображая его (см. пример далее)
*@
<br />
@{
    await Html.RenderPartialAsync("_Item", Model);
}

<br />
@{
    Model.FirstName = "Petr";
    Model.LastName = "Petrov";
    var result = await Html.PartialAsync("_Item", Model);
}
@result

<br />
@{
    result = await Html.PartialAsync("_Item",
       new Person()
       {
           FirstName = "Sid",
           LastName = "Sidorov"
       });
}
@result